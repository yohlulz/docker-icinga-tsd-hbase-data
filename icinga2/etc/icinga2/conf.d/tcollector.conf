object Host "tcollector_1" {
	import "generic-host"
	address = "tcollector_1"
	check_command = "hostalive"
	
	vars.region_type = "tcollector"
	vars.os = "Linux"
}

object Host "tcollector_2" {
        import "generic-host"
        address = "tcollector_2"
        check_command = "hostalive"

	vars.region_type = "tcollector"
        vars.os = "Linux"
}

object CheckCommand "check_tcollector_wrote_points" {
        import "plugin-check-command"
        
        command = [ PluginContribDir + "/check_tsd" ]
        
        arguments = {
                "-H" = "tsdb_rw"
                "-p" = "4242"
		"-t" = "host=$host.address$"
                "-m" = "tcollector.collector.lines_received"
                "-d" = "100"
                "-x" = "le"
                "-w" = "0.03"
                "-c" = "0.0"
                "-T" = "12"
                "rate" = {
                        skip_key = true
                        value = "-r"
                }       
        }

}

object EventCommand "drain_data" {
        import "plugin-event-command"

        command = "/etc/icinga2/handlers/drain_data.sh $host.address$ $state$ $state_type$ $check_attempt$ tsdb_rw $last_state$"
}

object EventCommand "restart_tcollector" {
        import "plugin-event-command"

        command = "/etc/icinga2/handlers/restart_tcollector.sh $host.address$ $state$ $state_type$ $check_attempt$"
}

object CheckCommand "check_tsdb_rw_alive" {
	import "check_tsdb"

        arguments = {
                "-H" = "tsdb_rw"
                "-p" = "4242"
                "-u" = "/api/stats"
                "-s" = "tsdb_rw"
                "-w" = "3"
                "-c" = "15"
                "-t" = "20"
                "perf" = {
                        skip_key = true
                        value = "-L"
                }
        }
}

apply Service "tcollector-alive" {
        import "generic-service"
        check_command = "check_tcollector_wrote_points"

        max_check_attempts = "6"
        retry_interval = "30"
        check_interval = "520"
        event_command = "restart_tcollector"

	vars.dependency = "tsdb_rw"

        assign where host.vars.region_type == "tcollector"
}


apply Service "drain_collector_data" {
        import "generic-service"
        check_command = "check_tsdb_rw_alive"

        max_check_attempts = "5"
        retry_interval = "20"
        check_interval = "60"
        event_command = "drain_data"

	vars.region_type = "tcollector"
	vars.dependency = "tcollector"

	assign where host.vars.region_type == "tcollector"
}


apply Dependency "tcollector-tsdb-alive" to Service {
	parent_host_name = "tsdb_rw"
	parent_service_name = "tsdb-healthy"

	disable_checks = true
	disable_notifications = true
	ignore_soft_states = false

	assign where service.vars.dependency && service.vars.dependency == "tsdb_rw"
}



